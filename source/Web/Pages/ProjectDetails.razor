@page "/project-details/{ProjectId:int?}"
@inject APIService APIService
@inject NavigationManager NavigationManager
@inject AuthenticateService AuthenticateService

<div class="flex items-center justify-center min-h-screen bg-gray-100">
    @if (IsLoading)
    {
        <p class="text-lg font-semibold text-gray-700">Loading...</p>
    }
    else
    {
        <div class="bg-white shadow-md rounded-lg p-8 w-full max-w-2xl">
            <h3 class="text-2xl font-bold mb-6 text-gray-800 text-center">
                @(IsEditMode ? "Edit Project" : "Create Project")
            </h3>

            <EditForm Model="ProjectModel" FormName="project-details" OnValidSubmit="HandleValidSubmit" class="space-y-6">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-red-500" />

                <div class="space-y-2">
                    <label for="name" class="block text-sm font-medium text-gray-700">Name:</label>
                    <InputText id="name" @bind-Value="ProjectModel.Name" class="w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 p-2" />
                </div>

                <div class="space-y-2">
                    <label for="description" class="block text-sm font-medium text-gray-700">Description:</label>
                    <InputTextArea id="description" @bind-Value="ProjectModel.Description" class="w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 p-2" />
                </div>

                @if (ProjectModel.CreatedAt != DateTime.MinValue)
                {
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Created At:</label>
                        <p class="text-gray-600">@ProjectModel.CreatedAt.ToString("dd-MM-yyyy HH:mm:ss")</p>
                    </div>
                }

                <div class="flex justify-center space-x-4">
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded-md shadow hover:bg-blue-600">
                        @SubmitButtonText
                    </button>
                    <button type="button" class="bg-gray-500 text-white px-4 py-2 rounded-md shadow hover:bg-gray-600" @onclick="Cancel">
                        Cancel
                    </button>
                </div>
            </EditForm>

            @if (IsEditMode)
            {
                <div class="mt-6 flex justify-center space-x-4">
                    <button class="bg-red-500 text-white px-4 py-2 rounded-md shadow hover:bg-red-600" @onclick="DeleteProject">
                        Delete Project
                    </button>
                    <button class="bg-green-500 text-white px-4 py-2 rounded-md shadow hover:bg-green-600" @onclick="ViewTasks">
                        View Tasks
                    </button>
                </div>


				@if (AuthenticateService.IsManagerUser)
				{
					<div class="mt-6 flex justify-center">
						<a href="/projects/@ProjectId/report" class="bg-yellow-500 text-white px-4 py-2 rounded-md shadow hover:bg-yellow-600">
                            Report
						</a>
					</div>
				}
            }

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <p class="text-red-500 mt-4 text-center">@ErrorMessage</p>
            }
        </div>
    }
</div>

@code
{
    [Parameter]
    public int? ProjectId { get; set; }

    [SupplyParameterFromForm]
    private Web.Models.Project ProjectModel { get; set; } = new();

    private bool IsEditMode => ProjectId.HasValue;
    private string SubmitButtonText => IsEditMode ? "Update Project" : "Create Project";
    private string? ErrorMessage;
    private bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (IsEditMode)
            {
                await LoadProject();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading project: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task LoadProject()
    {
        ProjectModel = await APIService.GetAsync<Web.Models.Project>($"projects/{ProjectId}") ?? new Web.Models.Project();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (IsEditMode)
            {
                await APIService.PutAsync($"projects/{ProjectId}", ProjectModel);
            }
            else
            {
                await APIService.PostAsync<Web.Models.Project, Web.Models.Project>("projects", ProjectModel);
            }

            NavigationManager.NavigateTo("/projects");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error saving project: {ex.Message}";
        }
    }

    private async Task DeleteProject()
    {
        if (ProjectId.HasValue)
        {
            try
            {
                await APIService.DeleteAsync($"projects/{ProjectId}");
                NavigationManager.NavigateTo("/projects");
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error deleting project: {ex.Message}";
            }
        }
    }

    private void ViewTasks()
    {
        if (ProjectId.HasValue)
        {
            NavigationManager.NavigateTo($"/tasks-project/{ProjectId}");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/projects");
    }
}

