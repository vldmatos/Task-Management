@page "/tasks-project/{ProjectId:int}"
@inject NavigationManager NavigationManager
@inject APIService APIService

<div class="container mx-auto p-4">
    <h2 class="text-2xl font-bold mb-4">Tasks do Projeto</h2>

    <div class="mb-4">
        <button class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                @onclick="NavigateToCreateTask">
            Create Task
        </button>
    </div>

    @if (Tasks != null && Tasks.Any())
    {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            @foreach (var task in Tasks)
            {
                <div class="bg-white shadow-md rounded p-4">
                    <h3 class="text-lg font-semibold">@task.Title</h3>
                    <p class="text-gray-600">@task.Description</p>
                    <p class="text-sm text-gray-500">Status: @task.Status</p>
                    <button class="mt-2 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
                            @onclick="() => NavigateToTaskDetails(task.Id)">
                        Details
                    </button>
                </div>
            }
        </div>
    }
    else
    {
        <p class="text-gray-500">No tasks found for this project.</p>
    }
</div>

@code
{
    [Parameter]
    public int ProjectId { get; set; }

    private List<Models.Task> Tasks { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Tasks = await APIService.GetAsync<List<Models.Task>>($"projects/{ProjectId}/tasks") ?? new List<Models.Task>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tasks: {ex.Message}");
        }
    }

    private void NavigateToTaskDetails(int taskId)
    {
        NavigationManager.NavigateTo($"/task-details/{taskId}?projectId={ProjectId}");
    }

    private void NavigateToCreateTask()
    {
        NavigationManager.NavigateTo($"/task-details?projectId={ProjectId}");
    }
}
