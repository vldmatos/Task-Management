@page "/task-details/{TaskId:int?}"
@inject APIService APIService
@inject NavigationManager NavigationManager

<div class="flex items-center justify-center min-h-screen bg-gray-100">
    <div class="bg-white shadow-md rounded-lg p-8 w-full max-w-2xl">
        <h3 class="text-2xl font-bold mb-6 text-gray-800 text-center">
            @(IsEditMode ? "Edit Task" : "Create Task")
        </h3>

        @if (!string.IsNullOrEmpty(ProjectName))
        {
            <p class="text-lg text-gray-600 mb-4">Project: <span class="font-semibold">@ProjectName</span></p>
        }

        <EditForm Model="TaskModel" OnValidSubmit="HandleValidSubmit" class="space-y-6">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-500" />

            <div class="space-y-2">
                <label for="title" class="block text-sm font-medium text-gray-700">Title:</label>
                <InputText id="title" @bind-Value="TaskModel.Title" class="w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 p-2" />
            </div>

            <div class="space-y-2">
                <label for="description" class="block text-sm font-medium text-gray-700">Description:</label>
                <InputTextArea id="description" @bind-Value="TaskModel.Description" class="w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 p-2" />
            </div>

            <div class="space-y-2">
                <label for="dueDate" class="block text-sm font-medium text-gray-700">Due Date:</label>
                <InputDate id="dueDate" @bind-Value="TaskModel.DueDate" class="w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 p-2" />
            </div>

            <div class="space-y-2">
                <label for="status" class="block text-sm font-medium text-gray-700">Status:</label>
                <InputSelect id="status" @bind-Value="TaskModel.Status" class="w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 p-2">
                    @foreach (var status in Enum.GetValues<Models.TaskStatus>())
                    {
                        <option value="@status">@status</option>
                    }
                </InputSelect>
            </div>

            <div class="space-y-2">
                <label for="priority" class="block text-sm font-medium text-gray-700">Priority:</label>
                <InputSelect id="priority" @bind-Value="TaskModel.Priority" class="w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 p-2">
                    @foreach (var priority in Enum.GetValues<Models.TaskPriority>())
                    {
                        <option value="@priority">@priority</option>
                    }
                </InputSelect>
            </div>

            <div class="flex justify-center space-x-4">
                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded-md shadow hover:bg-blue-600">
                    @SubmitButtonText
                </button>
                <button type="button" class="bg-gray-500 text-white px-4 py-2 rounded-md shadow hover:bg-gray-600" @onclick="Cancel">
                    Cancel
                </button>
            </div>
        </EditForm>

        @if (IsEditMode)
        {
            <div class="mt-6 flex justify-center space-x-4">
                <button class="bg-red-500 text-white px-4 py-2 rounded-md shadow hover:bg-red-600" @onclick="DeleteTask">
                    Delete Task
                </button>
                <button class="bg-green-500 text-white px-4 py-2 rounded-md shadow hover:bg-green-600" @onclick="NavigateToAddComment">
                    Add Comment
                </button>
            </div>
        }

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <p class="text-red-500 mt-4 text-center">@ErrorMessage</p>
        }
    </div>
</div>

@code
{
    [Parameter]
    public int? TaskId { get; set; }

    [SupplyParameterFromQuery]
    private int ProjectId { get; set; }

    private Web.Models.Task TaskModel { get; set; } = new();
    private string? ProjectName { get; set; }

    private bool IsEditMode => TaskId.HasValue;
    private string SubmitButtonText => IsEditMode ? "Update Task" : "Create Task";
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (IsEditMode)
            {
                await LoadTask();
            }

            if (ProjectId > 0)
            {
                var project = await APIService.GetAsync<Web.Models.Project>($"projects/{ProjectId}");
                ProjectName = project?.Name;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading task or project: {ex.Message}";
        }
    }

    private async Task LoadTask()
    {
        try
        {
            TaskModel = await APIService.GetAsync<Web.Models.Task>($"tasks/{TaskId}") ?? new Web.Models.Task();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading task: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            TaskModel.DueDate = TaskModel.DueDate.ToUniversalTime();
            TaskModel.ProjectId = ProjectId;

            if (IsEditMode)
            {
                await APIService.PutAsync($"tasks/{TaskId}", TaskModel);
            }
            else
            {
                await APIService.PostAsync<Web.Models.Task, Web.Models.Task>("tasks", TaskModel);
            }

            NavigationManager.NavigateTo($"/tasks-project/{ProjectId}");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error saving task: {ex.Message}";
        }
    }

    private async Task DeleteTask()
    {
        if (TaskId.HasValue)
        {
            try
            {
                await APIService.DeleteAsync($"tasks/{TaskId}");
                NavigationManager.NavigateTo($"/tasks-project/{ProjectId}");
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error deleting task: {ex.Message}";
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"/tasks-project/{ProjectId}");
    }

    private void NavigateToAddComment()
    {
        if (TaskId.HasValue)
        {
            NavigationManager.NavigateTo($"/task-comments?taskId={TaskId}");
        }
    }
}

